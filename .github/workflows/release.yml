name: Release
on:
  release:
    types: [published]
env:
  GIT_USER_NAME: 'grails-build'
  GIT_USER_EMAIL: 'grails-build@users.noreply.github.com'
jobs:
  publish:
    permissions:
      contents: write  #  to create release
      issues: write  #  to modify milestones
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.release_version.outputs.value }}
      target_branch: ${{ steps.extract_branch.outputs.value }}
    steps:
      - name: "üì• Checkout the repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: "üß± Setup up node"
        uses: actions/setup-node@v3
        with:
          node-version: '20.5.1'
      - name: "Pull node dependencies"
        run: npm install
      - name: "Package node dependencies"
        run: npx gulp grailsRelease
      - name: "‚òïÔ∏è Setup JDK"
        uses: actions/setup-java@v4
        with:
          distribution: 'liberica'
          java-version: '17'
      - name: "üêò Setup Gradle"
        uses: gradle/actions/setup-gradle@v4
      - name: "üìù Store the target branch"
        id: extract_branch
        run: |
          echo "Determining Target Branch"
          TARGET_BRANCH=${GITHUB_REF#refs/heads/}
          echo $TARGET_BRANCH
          echo "value=${TARGET_BRANCH}" >> $GITHUB_OUTPUT
      - name: "üìùSet the current release version"
        id: release_version
        run: echo "value=${GITHUB_REF:11}" >> $GITHUB_OUTPUT
      - name: "‚öôÔ∏è Run pre-release"
        uses: grails/github-actions/pre-release@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: "üß© Run Assemble"
        if: success()
        id: assemble
        run: ./gradlew -U assemble
      - name: "üîê Generate secring file"
        env:
          SECRING_FILE: ${{ secrets.SECRING_FILE }}
        run: echo $SECRING_FILE | base64 -d > ${{ github.workspace }}/secring.gpg
      - name: "üöÄ Publish to Sonatype OSSRH"
        id: publish
        env:
          NEXUS_PUBLISH_USERNAME: ${{ secrets.NEXUS_PUBLISH_USERNAME }}
          NEXUS_PUBLISH_PASSWORD: ${{ secrets.NEXUS_PUBLISH_PASSWORD }}
          NEXUS_PUBLISH_URL: ${{ secrets.NEXUS_PUBLISH_RELEASE_URL }}
          NEXUS_PUBLISH_STAGING_PROFILE_ID: ${{ secrets.NEXUS_PUBLISH_STAGING_PROFILE_ID }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}
          SECRING_FILE: ${{ secrets.SECRING_FILE }}
        run: >
          ./gradlew
          -Psigning.secretKeyRingFile=${{ github.workspace }}/secring.gpg 
          publishToSonatype 
          closeSonatypeStagingRepository
  release:
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: "üì• Checkout repository"
        uses: actions/checkout@v4
      - name: "‚òïÔ∏è Setup JDK"
        uses: actions/setup-java@v4
        with:
          distribution: liberica
          java-version: 17
      - name: "üì• Checkout repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          ref: v${{ needs.publish.outputs.release_version }}
      - name: "üêò Setup Gradle"
        uses: gradle/actions/setup-gradle@v4
      - name: "üèÜNexus Staging Close And Release"
        env:
          NEXUS_PUBLISH_USERNAME: ${{ secrets.NEXUS_PUBLISH_USERNAME }}
          NEXUS_PUBLISH_PASSWORD: ${{ secrets.NEXUS_PUBLISH_PASSWORD }}
          NEXUS_PUBLISH_URL: ${{ secrets.NEXUS_PUBLISH_RELEASE_URL }}
          NEXUS_PUBLISH_STAGING_PROFILE_ID: ${{ secrets.NEXUS_PUBLISH_STAGING_PROFILE_ID }}
        run: >
          ./gradlew
          findSonatypeStagingRepository
          releaseSonatypeStagingRepository
      - name: "‚öôÔ∏èRun post-release"
        if: success()
        uses: grails/github-actions/post-release@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          SNAPSHOT_SUFFIX: -SNAPSHOT
