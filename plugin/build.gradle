buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.grails.plugins:hibernate5:$grailsHibernateGradlePluginVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
    }
}

plugins {
    id "groovy"
    id "war"
    id "idea"
    id "eclipse"
    id "application"
    id "com.gorylenko.gradle-git-properties"
    id "com.adarshr.test-logger" version "4.0.0"
}

apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.grails-gsp"
apply plugin: "org.grails.grails-plugin"

group "org.grails.plugins"

dependencies {
    implementation platform("org.grails:grails-bom:$grailsVersion")

    implementation("org.grails:grails-core")
    implementation("org.grails:grails-logging")
    implementation("org.grails:grails-plugin-databinding")
    implementation("org.grails:grails-plugin-i18n")
    implementation("org.grails:grails-plugin-interceptors")
    implementation("org.grails:grails-plugin-rest")
    implementation("org.grails:grails-plugin-services")
    implementation("org.grails:grails-plugin-url-mappings")
    implementation("org.grails:grails-web-boot")
    implementation("org.grails.plugins:hibernate5")
    implementation("org.springframework.boot:spring-boot-autoconfigure")
    implementation("org.springframework.boot:spring-boot-starter-logging")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    console("org.grails:grails-console")
    runtimeOnly("com.h2database:h2")
    runtimeOnly("org.apache.tomcat:tomcat-jdbc")
    testImplementation("org.grails:grails-gorm-testing-support")
    testImplementation("org.grails:grails-web-testing-support")
    testImplementation("org.spockframework:spock-core")
    compileOnly "jakarta.servlet:jakarta.servlet-api"
    testImplementation "jakarta.servlet:jakarta.servlet-api"
    implementation("org.grails.plugins:gsp") 
    implementation("org.grails.plugins:scaffolding")

    implementation 'commons-io:commons-io:2.16.1'
    runtimeOnly("org.fusesource.jansi:jansi")
}

application {
    mainClass.set("grailsconsole.Application")
}

bootRun {
    ignoreExitValue true
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

gitProperties {
    keys = ['git.branch', 'git.commit.id', 'git.commit.time', 'git.commit.id.abbrev']
    failOnNoGitDirectory = true
    extProperty = 'gitProps' // git properties will be put in a map at project.ext.gitProps
}

generateGitProperties.outputs.upToDateWhen {
    false
} // make sure the generateGitProperties task always executes (even when git.properties is not changed)

jar {
    dependsOn generateGitProperties, bootStartScripts, bootDistTar, bootDistZip
    manifest {
        attributes("Built-By": System.getProperty("user.name"))
        attributes(["Plugin-Version"        : version,
                    "Plugin-Title"          : project.name,
                    "Plugin-Build-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "Git-Commit"            : "${-> project.ext.gitProps['git.commit.id.abbrev']}",
                    "Git-Branch"            : "${-> project.ext.gitProps['git.branch']}"])
    }
    from sourceSets.main.output
    exclude 'git.properties'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}

task packageJavadoc(type: Jar) {
    from javadoc
}

task packageGroovydoc(type: Jar) {
    from groovydoc
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
        events 'passed', 'skipped', 'failed'//, 'standardOut', 'standardError'
    }
}

testlogger {
    theme 'mocha'
    showFullStackTraces true
    showStandardStreams true
    showPassedStandardStreams false
    showSkippedStandardStreams false
    showFailedStandardStreams true
}

// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false
